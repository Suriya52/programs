Program to implement Stack using Linked List in C language

#include <stdio.h>
#include <stdlib.h>

// Structure to create a node with data and next pointer
struct Node {
    int data;
    struct Node *next;
};
struct Node* top = NULL;

// Push() operation on a  stack
void push(int value) {
    struct Node *newNode;
    newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = value; // assign value to the node
    if (top == NULL) {
        newNode->next = NULL;
    } else {
        newNode->next = top; // Make the node as top
    }
    top = newNode; // top always points to the newly created node
    printf("Node is Inserted\n\n");
}

int pop() {
    if (top == NULL) {
        printf("\nStack Underflow\n");
    } else {
        struct Node *temp = top;
        int temp_data = top->data;
        top = top->next;
        free(temp);
        return temp_data;
    }
}

void display() {
    // Display the elements of the stack
    if (top == NULL) {
        printf("\nStack Underflow\n");
    } else {
        printf("The stack is \n");
        struct Node *temp = top;
        while (temp->next != NULL) {
            printf("%d--->", temp->data);
            temp = temp->next;
        }
        printf("%d--->NULL\n\n", temp->data);
    }
}

int main() {
    int choice, value;
    printf("\nImplementaion of Stack using Linked List\n");
    while (1) {
        printf("1. Push\n2. Pop\n3. Display\n4. Exit\n");
        printf("\nEnter your choice : ");
        scanf("%d", &choice);
        switch (choice) {
        case 1:
            printf("\nEnter the value to insert: ");
            scanf("%d", &value);
            push(value);
            break;
        case 2:
            printf("Popped element is :%d\n", pop());
            break;
        case 3:
            display();
            break;
        case 4:
            exit(0);
            break;
        default:
            printf("\nWrong Choice\n");
        }
    }
}


Output:
Push Operation:

Implementaion of Stack using Linked List
1. Push
2. Pop
3. Display
4. Exit

Enter your choice : 1

Enter the value to insert: 12
Node is Inserted

1. Push
2. Pop
3. Display
4. Exit

Enter your choice : 1

Enter the value to insert: 45
Node is Inserted

1. Push
2. Pop
3. Display
4. Exit

Enter your choice : 1

Enter the value to insert: 56
Node is Inserted

1. Push
2. Pop
3. Display
4. Exit

Enter your choice : 3
The stack is 
56--->45--->12--->NULL
Pop Operation:

The stack is 
56--->45--->12--->NULL

1. Push
2. Pop
3. Display
4. Exit

Enter your choice : 2
Popped element is :56
1. Push
2. Pop
3. Display
4. Exit

Enter your choice : 2
Popped element is :45
1. Push
2. Pop
3. Display
4. Exit

Enter your choice : 3
The stack is 
12--->NULL

1. Push
2. Pop
3. Display
4. Exit

Enter your choice : 2
Popped element is :12
1. Push
2. Pop
3. Display
4. Exit



Code for implementing queue using linked list in C

#include <stdio.h>
#include <stdlib.h>

// Structure to create a node with data and next pointer
struct node {
	int data;
	struct node *next;
};

struct node *front = NULL;
struct node *rear = NULL;

// Enqueue() operation on a queue
void enqueue(int value) {
	struct node *ptr;
	ptr = (struct node *)malloc(sizeof(struct node));
	ptr->data = value;
	ptr->next = NULL;
	if ((front == NULL) && (rear == NULL)) {
		front = rear = ptr;
	} else {
		rear->next = ptr;
		rear = ptr;
	}
	printf("Node is Inserted\n\n");
}

// Dequeue() operation on a queue
int dequeue() {
	if (front == NULL) {
		printf("\nUnderflow\n");
		return -1;
	} else {
		struct node *temp = front;
		int temp_data = front->data;
		front = front->next;
		free(temp);
		return temp_data;
	}
}

// Display all elements of queue
void display() {
	struct node *temp;
	if ((front == NULL) && (rear == NULL)) {
		printf("\nQueue is Empty\n");
	} else {
		printf("The queue is \n");
		temp = front;
		while (temp) {
			printf("%d--->", temp->data);
			temp = temp->next;
		}
		printf("NULL\n\n");
	}
}

int main() {
	int choice, value;
	printf("\nImplementation of Queue using Linked List\n");
	while (choice != 4) {
		printf("1.Enqueue\n2.Dequeue\n3.Display\n4.Exit\n");
		printf("\nEnter your choice : ");
		scanf("%d", &choice);
		switch (choice) {
		case 1:
			printf("\nEnter the value to insert: ");
			scanf("%d", &value);
			enqueue(value);
			break;
		case 2:
			printf("Popped element is :%d\n", dequeue());
			break;
		case 3:
			display();
			break;
		case 4:
			exit(0);
			break;
		default:
			printf("\nWrong Choice\n");
		}
	}
	return 0;
}


Output:

Enqueue Operation:

Implementation of Queue using Linked List
1. Enqueue
2. Dequeue
3. Display
4. Exit

Enter your choice: 1

Enter the value to insert: 12
Node is Inserted

1.Enqueue
2.Dequeue
3.Display
4.Exit

Enter your choice: 1

Enter the value to insert: 45
Node is Inserted

1.Enqueue
2.Dequeue
3.Display
4.Exit

Enter your choice: 1

Enter the value to insert: 56
Node is Inserted

1.Enqueue
2.Dequeue
3.Display
4.Exit

Enter your choice : 3
The queue is
12--->45--->56--->NULL

Dequeue Operation:

The queue is
12--->45--->56--->NULL

1.Enqueue
2.Dequeue
3.Display
4.Exit

Enter your choice: 2
Popped element is:12
1. Enqueue
2. Dequeue
3. Display
4. Exit

Enter your choice: 2
Popped element is:45
1. Enqueue
2. Dequeue
3. Display
4. Exit

Enter your choice : 3
The queue is
56--->NULL

1.Enqueue
2.Dequeue
3.Display
4.Exit

Enter your choice: 2
Popped element is:56
1. Enqueue
2. Dequeue
3. Display
4. Exit



Addition of polynomials using linked list


#include<stdio.h>
#include<stdlib.h>

struct node
{
    int coef,expo;
    struct node* next;
};

struct node* insertpoly(struct node* thead,int c,int e);
struct node* append(struct node* thead,int c,int e);
struct node* polyaddition(struct node* p1thead,struct node* p2thead);
void display(struct node* thead);

void main()
{
    int a,b,n,i;
    struct node* p1head,* p2head,* p3head;
    p1head=p2head=NULL;

    // Inputing the first polynomial..

    printf("Enter the no of terms of polynomial 1..");
    scanf("%d",&n);
    printf("\nEnter the polynomial..");
    for(i=0;i<n;i++){
        printf("\nEnter the coefficient and exponent of the term..");
        scanf("%d%d",&a,&b);
        p1head=insertpoly(p1head,a,b);
    }

    // Inputing the second polynomial..

    printf("\nEnter the no of terms of polynomial 2..");
    scanf("%d",&n);
    printf("\nEnter the polynomial..");
    for(i=0;i<n;i++){
        printf("\nEnter the coefficient and exponent of the term..");
        scanf("%d%d",&a,&b);
        p2head=insertpoly(p2head,a,b);
    }

    //Performing Addition..

    p3head=polyaddition(p1head,p2head);

    //Displaying the polynomial..

    printf("\nThe polynomial 1 is..");
    display(p1head);
    printf("\nThe polynomial 2 is..");
    display(p2head);
    printf("\nThe sum of the two polynomials is..");
    display(p3head);
}

struct node* append(struct node* thead,int c,int e)
{
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->coef=c;
    newnode->expo=e;
    if(thead==NULL){// Corner Case to handle if the list is empty...
    newnode->next=NULL;
    return newnode;
    }
    struct node* trav=thead;
    while(trav->next!=NULL) // Traversing to point to the last node...
        trav=trav->next;
    trav->next=newnode;
    newnode->next=NULL;
    return thead;
}

struct node* insertpoly(struct node* thead,int c,int e)
{
    struct node* newnode=(struct node*)malloc(sizeof(struct node));
    newnode->coef=c;
    newnode->expo=e;
    if(thead==NULL){            // for inserting the first node..
        newnode->next=NULL;
        return newnode;
    }
    struct node* prev,* curr;
    prev=curr=thead;
    while(curr!=NULL && curr->expo>e){
        prev=curr;
        curr=curr->next;
    }
    if(curr==thead){            // for inserting before the first node...
        newnode->next=curr;
        return newnode;
    }
    else if(curr==NULL){        //for inserting after the last node....
        prev->next=newnode;
        newnode->next=NULL;
    }
    else{
        newnode->next=curr;
        prev->next=newnode;
    }
    return thead;
}

struct node* polyaddition(struct node* p1thead,struct node* p2thead)
{
    struct node* ans=NULL;
    struct node* t1,* t2;
    t1=p1thead;
    t2=p2thead;
    while(t1!=NULL && t2!=NULL){
        if(t1->expo > t2->expo){
            ans=append(ans,t1->coef,t1->expo);
            t1=t1->next;
        }
        else if(t1->expo < t2->expo){
            ans=append(ans,t2->coef,t2->expo);
            t2=t2->next;
        }
        else{
            ans=append(ans,(t1->coef)+(t2->coef),t1->expo);
            t1=t1->next;
            t2=t2->next;
        }
    }

    while(t1!=NULL){            //coping the remaining terms of polynomial 1...
        ans=append(ans,t1->coef,t1->expo);
        t1=t1->next;
    }

    while(t2!=NULL){            //coping the remaining terms of polynomial 2...
        ans=append(ans,t2->coef,t2->expo);
        t2=t2->next;
    }
    return ans;
}

void display(struct node* thead)
{
    struct node* temp=thead;
    if(temp==NULL){
        printf("\nEmpty..");
    }
    else{
        while(temp->next!=NULL){
            printf(" %dx^%d +",temp->coef,temp->expo);
            temp=temp->next;
        }
       printf(" %dx^%d ",temp->coef,temp->expo);
    }
}

Output:


Enter the no of terms of polynomial 1..3

Enter the polynomial..
Enter the coefficient and exponent of the term..2
4

Enter the coefficient and exponent of the term..3
3

Enter the coefficient and exponent of the term..4
2

Enter the no of terms of polynomial 2..3

Enter the polynomial..
Enter the coefficient and exponent of the term..5
4

Enter the coefficient and exponent of the term..6 
3

Enter the coefficient and exponent of the term..2
2

The polynomial 1 is.. 2x^4 + 3x^3 + 4x^2 
The polynomial 2 is.. 5x^4 + 6x^3 + 2x^2 
The sum of the two polynomials is.. 7x^4 + 9x^3 + 6x^2 


